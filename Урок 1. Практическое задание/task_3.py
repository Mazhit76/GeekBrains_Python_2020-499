"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

# O(n+7)


def max_cash_company(list_input):
    input_max = {}  # O(1)
    list_d = dict(list_input)  # O(1)
    for i in range(3):  # O(3)
        maximum = max(list_d.items(), key=lambda k_v: k_v[1])  # O(n)
        del list_d[maximum[0]]  # O(1)
        input_max[maximum[0]] = maximum[1]  # O(1)
    return input_max  # O(1)

# O (n*log(n)+3)
def max_cach_company1(list_input):
    list_from_dict = list(list_input.items())# O(n)
    list_from_dict.sort(key=lambda i: i[1], reverse=True) # O(log n)
    for i in range(3):
        print(list_from_dict[i][0], ':', list_from_dict[i][1]) O(3) # O(3)


base_company = {
    'Google': 212321000,
    'Mail': 20000,
    'Adobe': 202300,
    'Microsoft': 232000,
    'Soft': 120,
    'Alibaba': 90789762000,
    'SpaceX': 2987967000,
    'IBM': 267867867000,
    'X5': 2678000,
    'Alfa': 2768000,
    'Gazprom': 2678646734000,
    'Wilberry': 2036735600,
    'Famrmatek': 207656788700,
}
print(max_cash_company(base_company))
max_cach_company1(base_company)
